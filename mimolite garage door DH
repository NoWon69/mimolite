/**
 *  MIMOlite device type for garage door button, including power failure indicator.  Be sure mimolite has jumper removed before
 *  including the device to your hub, and tap Config to ensure power alarm is subscribed.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Updates:
 *  -------
 *  02-18-2016 : Initial commit
 *  03-05-2016 : Changed date format to MM-dd-yyyy h:mm a
 *  03-11-2016 : Due to ST's v2.1.0 app totally hosing up SECONDARY_CONTROL, implemented a workaround to display that info in a separate tile.
 *  08-27-2016 : Modified the device handler for my liking, primarly for looks and feel.
 *  01-08/2017 : Added code for Health Check capabilities/functions.
 *  02-11-2017 : Cleaned up code, and used secondary_control again for messages.
 *  03-11-2017 : Cleaned up code.
 *  03-24-2017 : Changed color schema to match ST's new format.
 *  04-08-2017 : Updated the updated() section to call configuration().
 *  05-19-2017 : Added additional attributeStates to match ST's DTH which should make this work with ActionTiles, and to use contact as the main tile instead of switch due to personal preference.
 *  05-20-2017 : Redefined tiles/names to be similar to the Linear-type opener DTH's, which should make this work with ActionTiles.
 *  05-23-2017 : Made the delay longer for retreiving device info (gets) after the main tile or the refresh tile is tapped.
 *  09-22-2019 : converted DH to Hubitat and added refresh before each action
 *  10-07-2019 : removed extra refresh from open/close it caused to much delay
 *  01-01-2020 : fixed the doorstate opening/closing with a send command in the refresh and setting refresh delay in RM made backwards compatible with stock Hubitat DH
 *  01-08-2020 : added door open/close timing and software lock for extra security to disable door opening
 *  01-11-2020 : added fingerprint, setable relay delay, added door lock funtion to on & push, fixed a bug with momentary switch delay setting
 *  02-26-2020 : , set the momentary switch delay setting as default 30 (3 sec) if you want to disable and manually control the on off function select 0 (disabled) in device settings
 */
metadata {
	// Automatically generated. Make future change here.
    definition (name: "MIMOlite Garage Door Controller 02/26/2020", namespace: "Hubitat", author: "scgs350") {
        capability "Momentary"
        capability "Relay Switch"
        capability "Polling"
        capability "Refresh"
        capability "Switch"
        capability "Sensor"
        capability "Contact Sensor"
        capability "Configuration"
        capability "Actuator"
        capability "Door Control"
        capability "Garage Door Control"
        capability "Health Check"
        capability "Lock"
        
        attribute "powered", "string"
        attribute "doorstate", "string"
        attribute "switch", "string"
        attribute "setSwitchDelay", "number"
        attribute "door_timer", "number"
        
        command "open"
        command "close"
        command "lock"
        command "unlock"
        command "on"
        command "off"        
        command "setSwitchDelay",[[title:"momentary switch delay", name:"select momentary switch delay 0(disabled),10,20,30 (*100ms) default 30(3 sec)", type:"NUMBER", description:"momentary switch delay", constraints:["NUMBER"]]]        
//        command "getSwitchDelay"       
        
fingerprint mfr: "132", deviceId: "273", prod:"1107", inClusters: "0x72,0x86,0x71,0x30,0x31,0x35,0x70,0x85,0x25", deviceJoinName: "mimolite garage door"
    }

preferences {
    input "doortimer", "enum", title:"door full open or close Time", required:false, defaultValue:20, options:[0:"disabled", 10:"10 sec", 20:"20 sec (default)", 30:"30 sec", 45:"45 sec", 60:"1 Minutes", 300:"5 Minutes", 600:"10 Minutes"]
//    input "SwitchDelay", "enum", title:"momentary switch delay", required:false, defaultValue:0, options:[0:"0 sec (disabled)", 10:"1 sec", 20:"2 sec", 30:"3 sec"] 
//    input name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: false    
    }
}

def setSwitchDelay(value) {
    if (value == null) {
        sendEvent(name: "momentary_switch_delay", value: "3 sec", displayed: true)
        log.warn "incomplete parameter list supplied..."
        log.info "momnentay switch enabled set to default 30 (3 sec)"        
        return delayBetween([
            secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 30, parameterNumber: 11, size: 1)),
            secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11))
        ],500) }
    if (value == 0) {
        sendEvent(name: "momentary_switch_delay", value: "disabled", displayed: true)
        log.info "set default 0 sec switch delay, momnentay state disabled"    
        return delayBetween([
            secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 0, parameterNumber: 11, size: 1)),
            secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),
        ],500) }
    if (value == 10) {
        sendEvent(name: "momentary_switch_delay", value: "1 sec", displayed: true)
        log.info "momnentay switch state enabled 1 sec"     
        return delayBetween([
            secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 10, parameterNumber: 11, size: 1)),
            secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),   
        ],500) }
    if (value == 20) {
        sendEvent(name: "momentary_switch_delay", value: "2 sec", displayed: true)
        log.info "momnentay switch state enabled 2 sec"    
        return delayBetween([
            secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 20, parameterNumber: 11, size: 1)),
            secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),
        ],500) }
    if (value == 30) {
        sendEvent(name: "momentary_switch_delay", value: "3 sec", displayed: true)
        log.info "momnentay switch state enabled 3 sec"      
        return delayBetween([
            secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 30, parameterNumber: 11, size: 1)),
            secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)), 
        ],500) }
}

def timer() {
    timer=Integer.parseInt(doortimer)
}

def door_timer() {
    sendEvent(name: "door_timer", value: timer(), displayed: true)
}
     
def parse(String description) {
// log.debug "description is: ${description}"
    def result = null
    def cmd = zwave.parse(description, [0x72: 1, 0x86: 1, 0x71: 1, 0x30: 1, 0x31: 3, 0x35: 1, 0x70: 1, 0x85: 1, 0x25: 1, 0x03: 1, 0x20: 1, 0x84: 1])
//log.debug "command value is: $cmd.CMD"
    if (cmd.CMD == "7105") {				
//Mimo sent a power loss report
        log.debug "Device lost power"
        sendEvent(name: "powered", value: "powerOff", descriptionText: "$device.displayName lost power")
    } else {
        sendEvent(name: "powered", value: "powerOn", descriptionText: "$device.displayName regained power")
    }
    if (cmd) {
        result = createEvent(zwaveEvent(cmd))
    }
// log.debug "Parse returned ${result?.descriptionText}"
    def statusTextmsg = ""
    def timeString = new Date().format("MM-dd-yy h:mm a", location.timeZone)
    statusTextmsg = "Last updated: "+timeString
    sendEvent("name":"statusText", "value":statusTextmsg)
    return result
}

def sensorValueEvent(Short value) {
    if (value) {
        sendEvent(name: "contact", value: "open")
        sendEvent(name: "door", value: "open")
        sendEvent(name: "door_timer", value: timer())
        sendEvent(name:"lock", value:"Door is unlocked")
        runIn(timer(), set_doorstate_to_opened)           
    } 
    else {
        sendEvent(name: "contact", value: "closed")
        sendEvent(name: "door", value: "closed")
        sendEvent(name: "door_timer", value: timer())
        sendEvent(name: "doorstate", value: "Door is closed, open/on to open")
        sendEvent(name: "switch", value: "off")          
    }
}

def zwaveEvent(hubitat.zwave.commands.basicv1.BasicReport cmd) {
    [name: "switch", value: cmd.value ? "on" : "off", type: "physical"]
}

def zwaveEvent(hubitat.zwave.commands.basicv1.BasicSet cmd)
{
    sensorValueEvent(cmd.value)
}

def zwaveEvent(hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport cmd)
{
    sensorValueEvent(cmd.sensorValue)
}

def zwaveEvent(hubitat.zwave.commands.alarmv1.AlarmReport cmd)
{
    log.debug "We lost power" //we caught this up in the parse method. This method not used.
}

def zwaveEvent(hubitat.zwave.Command cmd) {
    // Handles all Z-Wave commands we aren't interested in
    [:]
}
        
def lock() {
    log.debug "locked door"
    sendEvent(name:"lock", value:"Door is locked")
}

def unlock() {
    log.debug "unlocked door"
    sendEvent(name:"lock", value:"Door is unlocked")
}

def set_doorstate_to_opened() {
    sendEvent(name:"doorstate", value:"Door is open, close/on to close")
    sendEvent(name: "switch", value: "off") 
    sendEvent(name: "contact", value: "open")
}

def set_doorstate_to_closed() {
    sendEvent(name:"doorstate", value:"Door is closed, open/on to open")
}

def turnon() {
    return delayBetween([ 
        zwave.basicV1.basicSet(value: 0x00).format(),        
        zwave.basicV1.basicSet(value: 0xFF).format(),
        zwave.basicV1.basicGet().format()                
    ],1000) }  

def on() {
    if (device.currentValue("doorstate") != "moving")
    if (device.currentValue("lock") == "Door is unlocked") {
        log.debug "Sending on event to open/close door"
        sendEvent(name: "doorstate", value: "moving")
        sendEvent(name: "switch", value: "on")    
        turnon()
    }
    else {
        log.debug "not opening door is moving or locked"  
    }        
}    

def off() {
    log.debug "Sending off event to close door"
    sendEvent(name: "switch", value: "off")  
    return delayBetween([
        zwave.basicV1.basicSet(value: 0x00).format(),
        zwave.basicV1.basicGet().format()
    ],500)    
}

def open() {
    if (device.currentValue("contact") == "closed")
    if (device.currentValue("lock") == "Door is unlocked") {
        log.debug "Sending open event to open garage door"
        sendEvent(name: "doorstate", value: "opening")
        turnon()
    }    
    else {
        log.debug "not opening door is already open or locked"
    }
}

def close() {
    if (device.currentValue("doorstate") == "Door is open, close/on to close") {
        log.debug "Sending close event to close garage door"
        sendEvent(name: "doorstate", value: "closing")
        turnon()
    }
    else {
        log.debug "Not closing door since it is already closed"        
    }
}

def push() {  
    if (device.currentValue("lock") == "Door is unlocked") 
    if (device.currentValue("contact") == "closed") {
        log.debug "Sending open event to open garage door"
        sendEvent(name: "doorstate", value: "opening")
        turnon()
        }
    if (device.currentValue("doorstate") == "Door is open, close/on to close") {
        log.debug "Sending close event to close garage door"
        sendEvent(name: "doorstate", value: "closing")
        turnon()
    }      
    else {   
        log.debug "no cmd sent, door is locked or moving"
    }
}        

def poll() {
    refresh()
}

// PING is used by Device-Watch in attempt to reach the Device
def ping() {
    refresh()
}

def refresh() {
    log.debug "Refreshing" 
    return delayBetween([
        secureCmd(zwave.switchBinaryV1.switchBinaryGet()),
        secureCmd(zwave.sensorBinaryV1.sensorBinaryGet()),
        secureCmd(zwave.basicV1.basicGet()),
// get alert thresholds setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 8)),
// get alarms setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 9)), 
// get momentary switch setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),
    ],500)
}

def logsOn() {
    log.warn "debug logging enabled..."
    device.updateSetting("logEnable",[value:"true",type:"bool"])
}

def logsOff() { 
    log.warn "debug logging disabled..."  
    device.updateSetting("logEnable",[value:"false",type:"bool"])
}

def configure() {
    log.debug "Configuring defaults" //setting up to monitor power alarm and actuator duration 
    log.info "momnentay switch state enabled 3 sec"  
    sendEvent(name: "momentary_switch_delay", value: "3 sec", displayed: true)
    return delayBetween([
// enable analog alert thresholds for door contacts 0 disables   
        secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 3, parameterNumber: 8, size: 1)),
// tell device to send multivalue sensor updates every 1 = 10 seconds 
        secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 5, parameterNumber: 9, size: 1)),
// sets momentary switch set 0-30 0 (disabled) 10 = 1 seconds configured default for 30 (3 sec)      
        secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: 30, parameterNumber: 11, size: 1)),
// enable alarms to be sent to hub  
        secureCmd(zwave.associationV1.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId])),
// enable multivalue sensor updates to be sent to hub
        secureCmd(zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:[zwaveHubNodeId])),
    ],500) 
    refresh()
}

def getSwitchDelay() {
    def cmds = []
        cmds = [secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11))]
}	

def zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {
    log.info "ConfigurationReport- parameterNumber:${cmd.parameterNumber}, size:${cmd.size}, value:${cmd.scaledConfigurationValue}"
}

private secureCmd(cmd) {
    if (getDataValue("zwaveSecurePairingComplete") == "true") {
        return zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
    }
    else {
        return cmd.format()
    }	
}       
