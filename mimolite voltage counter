/**
 *  FortrezZ Flow Meter Interface
 *
 *  Copyright 2016 FortrezZ, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Based on Todd Wackford's MimoLite Garage Door Opener
 */
metadata {
	// Automatically generated. Make future change here.
	definition (name: "MIMOlite voltage counter 03/04/2020", namespace: "fortrezz", author: "FortrezZ, LLC") {
		capability "Configuration"
		capability "Switch"
		capability "Refresh"
		capability "Contact Sensor"
        capability "Voltage Measurement"

		attribute "powered", "string"

		command "on"
		command "off"
        
        fingerprint deviceId: "0x1000", inClusters: "0x72,0x86,0x71,0x30,0x31,0x35,0x70,0x85,0x25,0x03"
	}

    preferences {
        input "RelaySwitchDelay", "decimal", title: "Delay between relay switch on and off in seconds. Only Numbers 0 to 3.0 allowed. 0 value will remove delay and allow relay to function as a standard switch", description: "Numbers 0 to 3.1 allowed.", defaultValue: 0, required: false, displayDuringSetup: true
    }
}

def parse(String description) {
//log.debug "description is: ${description}"
	def result = null
	def cmd = zwave.parse(description, [0x20: 1, 0x84: 1, 0x30: 1, 0x70: 1, 0x31: 5]) 
//log.debug "command value is: $cmd.CMD"
//Mimo sent a power loss report
    if (cmd.CMD == "7105") {
    	log.debug "Device lost power"
    	sendEvent(name: "powered", value: "powerOff", descriptionText: "$device.displayName lost power")
    } else {
    	sendEvent(name: "powered", value: "powerOn", descriptionText: "$device.displayName regained power")
    }
// debug message to make sure the contact tile is working
    //log.debug "${device.currentValue('contact')}"
	if (cmd) {
		result = createEvent(zwaveEvent(cmd))
	}
	log.debug "Parse returned ${result?.descriptionText} $cmd.CMD"
	return result
}

def updated() {
    log.debug "Settings Updated..."
    configure()
}
//notes about zwaveEvents:
// these are special overloaded functions which MUST be returned with a map similar to (return [name: "switch", value: "on"])
// not doing so will produce a null on the parse function, this will mess you up in the future.
// Perhaps can use 'createEvent()' and return that as long as a map is inside it.
def zwaveEvent(hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport cmd) { 
log.debug "switchBinaryReport ${cmd}"
// if the switch is on it will not be 0, so on = true
    if (cmd.value)
    {
// change switch value to on
		return [name: "switch", value: "on"]
    }
    else
    {
// if the switch sensor report says its off then change switch value to off
		return [name: "switch", value: "off"]
    }       
}

// working on next for the analogue and digital stuff.
// basic set is essentially our digital sensor for SIG1
def zwaveEvent(hubitat.zwave.commands.basicv1.BasicSet cmd) {
	log.debug "sent a BasicSet command"
    //refresh() 
// requests a report of the anologue input voltage
    delayBetween([zwave.sensorMultilevelV5.sensorMultilevelGet().format()])
	[name: "contact", value: cmd.value ? "open" : "closed"]}
    //[name: "contact", value: cmd.value ? "open" : "closed", type: "digital"],1000}
//    
//def zwaveEvent(hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport cmd) {
//	log.debug "sent a sensorBinaryReport command"
//	refresh()    
//	[name: "contact", value: cmd.value ? "open" : "closed"]
//}

// sensorMultilevelReport is used to report the value of the analog voltage for SIG1
def zwaveEvent (hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd) {
    log.debug "sent a SensorMultilevelReport"
    def ADCvalue = cmd.scaledSensorValue
    sendEvent(name: "voltageCounts", value: ADCvalue)
    CalculateVoltage(cmd.scaledSensorValue)
}

def zwaveEvent(hubitat.zwave.Command cmd) {
// Handles all Z-Wave commands we aren't interested in
     log.debug("Un-parsed Z-Wave message ${cmd}")
	[:]
}

def CalculateVoltage(ADCvalue) {
    def map = [:]
    def volt = (((1.5338*(10**-16))*(ADCvalue**5)) - ((1.2630*(10**-12))*(ADCvalue**4)) + ((3.8111*(10**-9))*(ADCvalue**3)) - ((4.7739*(10**-6))*(ADCvalue**2)) + ((2.8558*(10**-3))*(ADCvalue)) - (2.2721*(10**-2)))
//def volt = (((3.19*(10**-16))*(ADCvalue**5)) - ((2.18*(10**-12))*(ADCvalue**4)) + ((5.47*(10**-9))*(ADCvalue**3)) - ((5.68*(10**-6))*(ADCvalue**2)) + (0.0028*ADCvalue) - (0.0293))
//log.debug "$cmd.scale $cmd.precision $cmd.size $cmd.sensorType $cmd.sensorValue $cmd.scaledSensorValue"
    def voltResult = volt.round(1)// + "v"  
    map.name = "voltage"
    map.value = voltResult
    map.unit = "v"
    return map
}
	
def configure() {
    def x = 0;
    if (RelaySwitchDelay != null) {x = (RelaySwitchDelay*10).toInteger()}
//setting up to monitor power alarm and actuator duration
    log.debug "Configuring.... " 
    delayBetween([
// enable alarms to be sent to hub if a power dropout occurs, the MIMOlite will send an Alarm Command Class report (if there is enough available residual power) 
        secureCmd(zwave.associationV1.associationSet(groupingIdentifier:3, nodeId:[zwaveHubNodeId])),
// enable multivalue sensor updates to be sent to hub of the ADC analog voltage to the input     
        secureCmd(zwave.associationV1.associationSet(groupingIdentifier:2, nodeId:[zwaveHubNodeId])),  
// when the input is digitally triggered or untriggered, and a binary sensor report        
        secureCmd(zwave.associationV1.associationSet(groupingIdentifier:4, nodeId:[zwaveHubNodeId])),        
// sets momentary switch set 0-30 0 (disabled) 10 = 1 seconds configured default for 30 (3 sec)      
        secureCmd(zwave.configurationV1.configurationSet(scaledConfigurationValue: (x), parameterNumber: 11, size: 1)),
// get momentary switch setting
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),
        zwave.basicV1.basicGet().format()
	],1000)
}

def on() {
// physically changes the relay to on and requests a report of the relay
    sendEvent(name: "switch", value: "on") 
    return delayBetween([      
        zwave.basicV1.basicSet(value: 0xFF).format(),
        zwave.basicV1.basicGet().format()                
    ],1000)
}

def off() {
    log.info "Sending off cmd to door switch"
    sendEvent(name: "switch", value: "off")
    return delayBetween([
        zwave.basicV1.basicSet(value: 0x00).format(),
        zwave.basicV1.basicGet().format()
    ],1000)  
}

def refresh() {
    log.info "Refreshing" 
    return delayBetween([
        secureCmd(zwave.switchBinaryV1.switchBinaryGet()),
        secureCmd(zwave.sensorBinaryV1.sensorBinaryGet()),
        secureCmd(zwave.basicV1.basicGet()),
// get alert thresholds setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 8)),
// get alarms setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 9)), 
// get momentary switch setting        
        secureCmd(zwave.configurationV1.configurationGet(parameterNumber: 11)),
// requests a report of the anologue input voltage
//        secureCmd(zwave.sensorMultilevelV1.meterPulseGet()),
        secureCmd(zwave.sensorMultilevelV1.sensorMultilevelGet())
    ],1000)
}

def zwaveEvent(hubitat.zwave.commands.configurationv1.ConfigurationReport cmd) {
    log.info "ConfigurationReport- parameterNumber:${cmd.parameterNumber}, size:${cmd.size}, value:${cmd.scaledConfigurationValue}"
}

private secureCmd(cmd) {
    if (getDataValue("zwaveSecurePairingComplete") == "true") {
        return zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
    }
    else {
        return cmd.format()
    }	
}       
